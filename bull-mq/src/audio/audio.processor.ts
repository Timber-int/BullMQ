import { Process, Processor } from '@nestjs/bull';
import { Job } from 'bull';
import * as ffmpeg from 'fluent-ffmpeg';

@Processor('audio')
export class AudioProcessor {
  @Process('analyze_audio')
  async handleAudio(job: Job<{ filePath: string }>) {
    const { filePath } = job.data;

    console.log(`üéß –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ: ${filePath}`);

    const duration = await this.getAudioDuration(filePath);
    console.log(`‚úÖ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–¥—ñ–æ: ${duration} —Å–µ–∫—É–Ω–¥`);
  }

  private getAudioDuration(filePath: string): Promise<number> {
    return new Promise((resolve, reject) => {
      ffmpeg.ffprobe(filePath, (err, metadata) => {
        if (err) return reject(err);

        const duration = metadata?.format?.duration;
        if (typeof duration === 'number') {
          resolve(duration);
        } else {
          reject(new Error('–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–¥—ñ–æ'));
        }
      });
    });
  }
}
